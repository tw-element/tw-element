@use 'sass:map';

@use 'mixins/mixins' as *;
@use 'mixins/var' as *;
@use 'common/var' as *;

@include b(tag) {
  @include set-component-css-var('tag', $tag);
}

$tag-border-width: 1px;

$tag-icon-span-gap: () !default;
$tag-icon-span-gap: map.merge(
  (
    'large': 8px,
    'default': 6px,
    'small': 4px,
  ),
  $tag-icon-span-gap
);

@mixin genTheme(
  $backgroundColorWeight,
  $borderColorWeight,
  $textColorWeight,
  $hoverColorWeight
) {
  --tw-tag-bg-color: #{mix(
      map.get($tag-color, 'primary'),
      $color-white,
      $backgroundColorWeight
    )};
  --tw-tag-border-color: #{mix(
      map.get($tag-color, 'primary'),
      $color-white,
      $borderColorWeight
    )};
  --tw-tag-text-color: #{mix(
      map.get($tag-color, 'primary'),
      $color-white,
      $textColorWeight
    )};
  --tw-tag-hover-color: #{mix(
      map.get($tag-color, 'primary'),
      $color-white,
      $hoverColorWeight
    )};

  background-color: var(--tw-tag-bg-color);
  border-color: var(--tw-tag-border-color);
  color: var(--tw-tag-text-color);

  @include when(hit) {
    border-color: map.get($tag-color, 'primary');
  }

  .#{$namespace}-tag__close {
    color: var(--tw-tag-text-color);
    &:hover {
      color: var(--tw-color-white);
      background-color: var(--tw-tag-hover-color);
    }
  }

  @each $type in $types {
    &.#{$namespace}-tag--#{$type} {
      --tw-tag-bg-color: #{mix(
          map.get($tag-color, $type),
          $color-white,
          $backgroundColorWeight
        )};
      --tw-tag-border-color: #{mix(
          map.get($tag-color, $type),
          $color-white,
          $borderColorWeight
        )};
      --tw-tag-text-color: #{mix(
          map.get($tag-color, $type),
          $color-white,
          $textColorWeight
        )};
      --tw-tag-hover-color: #{mix(
          map.get($tag-color, $type),
          $color-white,
          $hoverColorWeight
        )};

      @include when(hit) {
        border-color: map.get($tag-color, $type);
      }
    }
  }
}

@include b(tag) {
  @include genTheme(10%, 20%, 100%, 100%);
  display: inline-flex;
  justify-content: center;
  align-items: center;

  height: map.get($tag-height, 'default');
  padding: 0 map.get($tag-padding, 'default') - $border-width-base;
  font-size: var(--tw-tag-font-size);
  line-height: 1;
  border-width: $tag-border-width;
  border-style: solid;
  border-radius: var(--tw-tag-border-radius);
  box-sizing: border-box;
  white-space: nowrap;

  --tw-icon-size: 14px;

  .#{$namespace}-icon {
    border-radius: 50%;
    text-align: center;
    position: relative;
    cursor: pointer;

    font-size: calc(var(--tw-icon-size) - 1px);

    height: var(--tw-icon-size);
    width: var(--tw-icon-size);
    line-height: var(--tw-icon-size);

    svg {
      margin: 1px;
    }
  }

  .#{$namespace}-tag__close {
    margin-left: map.get($tag-icon-span-gap, 'default');
  }

  @include m(dark) {
    @include genTheme(100%, 100%, 0, 80%);
  }

  @include m(plain) {
    @include genTheme(0, 40%, 100%, 100%);
  }

  &.is-closable {
    padding-right: map.get($tag-icon-span-gap, 'default') - $border-width-base;
  }

  @each $size in (large, default, small) {
    @include m($size) {
      padding: 0 map.get($tag-padding, $size) - $tag-border-width;
      height: map.get($tag-height, $size);

      --tw-icon-size: #{map.get($tag-icon-size, $size)};

      .#{$namespace}-tag__close {
        margin-left: map.get($tag-icon-span-gap, $size);
      }

      &.is-closable {
        padding-right: map.get($tag-icon-span-gap, $size) - $border-width-base;
      }
    }
  }

  @include m(small) {
    .#{$namespace}-icon-close {
      transform: scale(0.8);
    }
  }
}
